#include "stm32f4xx.h"

#define BMP180_ADDRESS	(uint8_t)0x77

#define L3GD20H_ADDRESS					(uint8_t)0x6B
#define L3GD20H_AXIS_AND_POWER_ON		(uint8_t)0x0F

#define LSM303_ADDRESS_ACCEL          (uint8_t)0x1E
#define LSM303_ADDRESS_MAG            (uint8_t)0x19

typedef enum
{
	BMP180_CAL_AC1_MSB			= 0xAA,
	BMP180_CAL_AC1_LSB			= 0xAB,
	BMP180_CAL_AC2_MSB			= 0xAC,
	BMP180_CAL_AC2_LSB			= 0xAD,
	BMP180_CAL_AC3_MSB			= 0xAE,
	BMP180_CAL_AC3_LSB			= 0xAF,
	BMP180_CAL_AC4_MSB			= 0xB0,
	BMP180_CAL_AC4_LSB			= 0xB1,
	BMP180_CAL_AC5_MSB			= 0xB2,
	BMP180_CAL_AC5_LSB			= 0xB3,
	BMP180_CAL_AC6_MSB			= 0xB4,
	BMP180_CAL_AC6_LSB			= 0xB4,
	BMP180_CAL_B1_MSB			= 0xB6,
	BMP180_CAL_B1_LSB			= 0xB7,
	BMP180_CAL_B2_MSB			= 0xB8,
	BMP180_CAL_B2_LSB			= 0xB9,
	BMP180_CAL_MB_MSB			= 0xBA,
	BMP180_CAL_MB_LSB			= 0xBB,
	BMP180_CAL_MC_MSB			= 0xBC,
	BMP180_CAL_MC_LSB			= 0xBD,
	BMP180_CAL_MD_MSB			= 0xBE,
	BMP180_CAL_MD_LSB			= 0xBF,
	BMP180_CONTROL				= 0xF4,
	BMP180_TEMPDATA_MSB			= 0xF6,
	BMP180_TEMPDATA_LSB			= 0xF7,
	BMP180_PRESSUREDATA_MSB		= 0xF6,
	BMP180_PRESSUREDATA_LSB		= 0xF7,
	BMP180_PRESSUREDATA_XLSB	= 0xF8,
	BMP180_READTEMPCMD			= 0x2E,
	BMP180_READPRESSURECMD		= 0x34
}bmp180Registers_t;

typedef enum
{
	L3GD20H_REGISTER_WHO_AM_I            = 0x0F,
	L3GD20H_REGISTER_CTRL_REG1           = 0x20,
	L3GD20H_REGISTER_CTRL_REG2           = 0x21,
	L3GD20H_REGISTER_CTRL_REG3           = 0x22,
	L3GD20H_REGISTER_CTRL_REG4           = 0x23,
	L3GD20H_REGISTER_CTRL_REG5           = 0x24,
	L3GD20H_REGISTER_REFERENCE           = 0x25,
	L3GD20H_REGISTER_OUT_TEMP            = 0x26,
	L3GD20H_REGISTER_STATUS_REG          = 0x27,
	L3GD20H_REGISTER_OUT_X_L             = 0x28,
	L3GD20H_REGISTER_OUT_X_H             = 0x29,
	L3GD20H_REGISTER_OUT_Y_L             = 0x2A,
	L3GD20H_REGISTER_OUT_Y_H             = 0x2B,
	L3GD20H_REGISTER_OUT_Z_L             = 0x2C,
	L3GD20H_REGISTER_OUT_Z_H             = 0x2D,
	L3GD20H_REGISTER_FIFO_CTRL_REG       = 0x2E,
	L3GD20H_REGISTER_FIFO_SRC_REG        = 0x2F,
	L3GD20H_REGISTER_INT1_CFG            = 0x30,
	L3GD20H_REGISTER_INT1_SRC            = 0x31,
	L3GD20H_REGISTER_TSH_XH              = 0x32,
	L3GD20H_REGISTER_TSH_XL              = 0x33,
	L3GD20H_REGISTER_TSH_YH              = 0x34,
	L3GD20H_REGISTER_TSH_YL              = 0x35,
	L3GD20H_REGISTER_TSH_ZH              = 0x36,
	L3GD20H_REGISTER_TSH_ZL              = 0x37,
	L3GD20H_REGISTER_INT1_DURATION       = 0x38
} l3gd20hRegisters_t;

typedef enum
{
	LSM303_REGISTER_ACCEL_CTRL_REG1_A         = 0x20,
	LSM303_REGISTER_ACCEL_CTRL_REG2_A         = 0x21,
	LSM303_REGISTER_ACCEL_CTRL_REG3_A         = 0x22,
	LSM303_REGISTER_ACCEL_CTRL_REG4_A         = 0x23,
	LSM303_REGISTER_ACCEL_CTRL_REG5_A         = 0x24,
	LSM303_REGISTER_ACCEL_CTRL_REG6_A         = 0x25,
	LSM303_REGISTER_ACCEL_REFERENCE_A         = 0x26,
	LSM303_REGISTER_ACCEL_STATUS_REG_A        = 0x27,
	LSM303_REGISTER_ACCEL_OUT_X_L_A           = 0x28,
	LSM303_REGISTER_ACCEL_OUT_X_H_A           = 0x29,
	LSM303_REGISTER_ACCEL_OUT_Y_L_A           = 0x2A,
	LSM303_REGISTER_ACCEL_OUT_Y_H_A           = 0x2B,
	LSM303_REGISTER_ACCEL_OUT_Z_L_A           = 0x2C,
	LSM303_REGISTER_ACCEL_OUT_Z_H_A           = 0x2D,
	LSM303_REGISTER_ACCEL_FIFO_CTRL_REG_A     = 0x2E,
	LSM303_REGISTER_ACCEL_FIFO_SRC_REG_A      = 0x2F,
	LSM303_REGISTER_ACCEL_INT1_CFG_A          = 0x30,
	LSM303_REGISTER_ACCEL_INT1_SOURCE_A       = 0x31,
	LSM303_REGISTER_ACCEL_INT1_THS_A          = 0x32,
	LSM303_REGISTER_ACCEL_INT1_DURATION_A     = 0x33,
	LSM303_REGISTER_ACCEL_INT2_CFG_A          = 0x34,
	LSM303_REGISTER_ACCEL_INT2_SOURCE_A       = 0x35,
	LSM303_REGISTER_ACCEL_INT2_THS_A          = 0x36,
	LSM303_REGISTER_ACCEL_INT2_DURATION_A     = 0x37,
	LSM303_REGISTER_ACCEL_CLICK_CFG_A         = 0x38,
	LSM303_REGISTER_ACCEL_CLICK_SRC_A         = 0x39,
	LSM303_REGISTER_ACCEL_CLICK_THS_A         = 0x3A,
	LSM303_REGISTER_ACCEL_TIME_LIMIT_A        = 0x3B,
	LSM303_REGISTER_ACCEL_TIME_LATENCY_A      = 0x3C,
	LSM303_REGISTER_ACCEL_TIME_WINDOW_A       = 0x3D
}lsm303AccelRegisters_t;

typedef enum
{
	LSM303_REGISTER_MAG_CRA_REG_M             = 0x00,
	LSM303_REGISTER_MAG_CRB_REG_M             = 0x01,
	LSM303_REGISTER_MAG_MR_REG_M              = 0x02,
	LSM303_REGISTER_MAG_OUT_X_H_M             = 0x03,
	LSM303_REGISTER_MAG_OUT_X_L_M             = 0x04,
	LSM303_REGISTER_MAG_OUT_Z_H_M             = 0x05,
	LSM303_REGISTER_MAG_OUT_Z_L_M             = 0x06,
	LSM303_REGISTER_MAG_OUT_Y_H_M             = 0x07,
	LSM303_REGISTER_MAG_OUT_Y_L_M             = 0x08,
	LSM303_REGISTER_MAG_SR_REG_Mg             = 0x09,
	LSM303_REGISTER_MAG_IRA_REG_M             = 0x0A,
	LSM303_REGISTER_MAG_IRB_REG_M             = 0x0B,
	LSM303_REGISTER_MAG_IRC_REG_M             = 0x0C,
	LSM303_REGISTER_MAG_TEMP_OUT_H_M          = 0x31,
	LSM303_REGISTER_MAG_TEMP_OUT_L_M          = 0x32
}lsm303MagRegisters_t;

typedef enum
{
	LSM303_MAGGAIN_1_3                        = 0x20,  // +/- 1.3
	LSM303_MAGGAIN_1_9                        = 0x40,  // +/- 1.9
	LSM303_MAGGAIN_2_5                        = 0x60,  // +/- 2.5
	LSM303_MAGGAIN_4_0                        = 0x80,  // +/- 4.0
	LSM303_MAGGAIN_4_7                        = 0xA0,  // +/- 4.7
	LSM303_MAGGAIN_5_6                        = 0xC0,  // +/- 5.6
	LSM303_MAGGAIN_8_1                        = 0xE0   // +/- 8.1
}lsm303MagGain;

typedef enum
{
	LSM303_MAGRATE_0_7                        = 0x00,  // 0.75 Hz
	LSM303_MAGRATE_1_5                        = 0x01,  // 1.5 Hz
	LSM303_MAGRATE_3_0                        = 0x62,  // 3.0 Hz
	LSM303_MAGRATE_7_5                        = 0x03,  // 7.5 Hz
	LSM303_MAGRATE_15                         = 0x04,  // 15 Hz
	LSM303_MAGRATE_30                         = 0x05,  // 30 Hz
	LSM303_MAGRATE_75                         = 0x06,  // 75 Hz
	LSM303_MAGRATE_220                        = 0x07   // 200 Hz
} lsm303MagRate;

void TEN_DOF_IUM_Initialise(void);
void GPIO_Initialise(void);
void I2C_Initialise(void);

void I2C_Write8
(
    uint8_t addr, 
    uint8_t reg, 
    uint8_t data
);
